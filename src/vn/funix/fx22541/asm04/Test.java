package vn.funix.fx22541.asm04;// Java code to search for element in a
// very large file using Multithreading

import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class Test {
  // Max size of array
//  static final int max = 16;
  static boolean result;

  // Max number of threads to create
  static final int thread_max = 10;

  static List<Integer> a = List.of (1, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220, 5, 7, 10, 12, 14, 15, 18,
          20, 22, 25, 27, 30, 64, 110, 220);
  static int key = 20;

  // Flag to indicate if key is found in a[]
  // or not.
  static int f = 0;

  static int current_thread = 0;

  // Linear search function which will
  // run for all the threads
  static void ThreadSearch(int num)
  {
    for (int i = num * (a.size() / 10);
         i < ((num + 1) * (a.size() / 10)); i++) {
      if (a.get(i) == key)
        result = true;
    }
  }

  // Driver Code
  public static void main(String[] args)
  {
    ExecutorService executor
            = Executors.newFixedThreadPool(thread_max);

    for (int i = 0; i < thread_max; i++) {
      executor.execute(new Runnable() {
        public void run()
        {
          ThreadSearch(current_thread++);
        }
      });
    }

    executor.shutdown();

    while (!executor.isTerminated()) {
      // Wait for all threads to complete
    }
      System.out.println("Key element found: " + result);
  }
}

// This code is contributed by shivhack999
